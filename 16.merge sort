#include <stdio.h>
#include <stdlib.h>  // for malloc, free

// Function declarations
void mergeSort(int arr[], int left, int right);
void merge(int arr[], int left, int mid, int right);

int main() {
    printf("B.MAHESH REDDY\n192210708\n");
    
    // Input from user
    printf("\nEnter the values separated by spaces:\n");
    int maxSize = 100;  // Adjust this based on expected maximum input size
    int *unsortedArr = (int *)malloc(maxSize * sizeof(int));
    int count = 0;

    // Reading input
    char c;
    while (scanf("%d%c", &unsortedArr[count], &c) == 2) {
        count++;
        if (c == '\n') break;  // break loop if newline character is encountered
    }

    // Performing merge sort
    mergeSort(unsortedArr, 0, count - 1);

    // Output sorted array
    printf("Sorted array: ");
    for (int i = 0; i < count; i++) {
        printf("%d ", unsortedArr[i]);
    }
    printf("\n");

    // Free dynamically allocated memory
    free(unsortedArr);

    return 0;
}

// Merge sort function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        merge(arr, left, mid, right);
    }
}

// Merge function
void merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Temporary arrays
    int L[n1], R[n2];

    // Copy data to temporary arrays L[] and R[]
    for (i = 0; i < n1; i++) {
        L[i] = arr[left + i];
    }
    for (j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    // Merge the temporary arrays back into arr[left..right]
    i = 0; // Initial index of first subarray
    j = 0; // Initial index of second subarray
    k = left; // Initial index of merged subarray

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
